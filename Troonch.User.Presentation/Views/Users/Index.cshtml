@using Troonch.User.Domain.DTOs.Response;
@model List<UserResponseDTO>;

<div class="page-header">
    <h3 class="page-title">Utenti</h3>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th class="d-none d-md-table-cell"> Icona </th>
            <th> Nome </th>
            <th> Email </th>
            <th> Telefono </th>
            <th> Data di Nascita </th>
            <th class="d-none d-md-table-cell"> Completamento profilo </th>
            <th class="d-none d-md-table-cell"> Creato il </th>
            <th class="d-none d-md-table-cell"> Ultima modifica </th>
        </tr>
    </thead>
    <tbody>
        @foreach(var User in Model)
        {
            <tr id="row-@User.Id" onclick="showUserModal(this)" data-id="@User.Id" data-fullname="@User.FullName" role="button">
                <td class="py-1 d-none d-md-table-cell">
                    <img src="~/assets/images/faces-clipart/pic-1.png" alt="@User.FullName">
                </td>
                <td> @User.FullName </td>
                <td> @User.Email </td>
                <td> @User.PhoneNumber </td>
                @if (User.DateOfBirthNormalized is null || User.DateOfBirth == default(DateOnly))
                {
                    <td></td>
                }
                else
                {
                    <td>@User.DateOfBirthNormalized</td>
                }
                <td class="d-none d-md-table-cell">
                    <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" style="width: @User.ProgressOfDataComplete%" aria-valuenow="@User.ProgressOfDataComplete" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                </td>
                <td class="d-none d-md-table-cell"> @User.CreatedOnNormalized </td>
                <td class="d-none d-md-table-cell"> @User.UpdatedOnNormalized </td>
            </tr>
        }
    </tbody>
</table>

@* Users Modal *@
<div class="modal fade" id="user-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="user-modal-title" class="modal-title"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div id="user-modal-body" class="modal-body">
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="confirm-user-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="confirm-user-modal-title" class="modal-title"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div id="confirm-user-delete-modal-body" class="modal-body">
                <p id="confirm-user-answer"></p>

                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-sm btn-secondary mr-3" data-bs-dismiss="modal" aria-label="Close">
                        <i class="mdi mdi-close-circle mx-2"></i> Cancel
                    </button>
                    <button id="confirm-user-modal-button" type="button" class="btn btn-sm btn-primary" onclick="onClickConfirmUserModal(this)">
                        <i class="mdi mdi-checkbox-marked-circle mx-1"></i> Conferma
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Notification Partial -->
@Html.Partial("_Notification")

@section Scripts {

    <script>

        const showUserModal = async (element) => {
            
            const userId = element.getAttribute('data-id');

            await renderHTML(`RenderUserCard/${userId}`, 'user-modal-body', 'user-modal');
            
        };

        const cleanUserModalBody = () =>
            document.getElementById('user-modal-body').innerHTML = '';

        const confirmEmail = async (userId) => {
            try{
                const response = await fetch(`/Users/ConfirmEmail/${userId}`);

                if (!response.ok) {
                    return await handleRequestInError(response);
                }

                showNotification(false);

                
                setTimeout(() => {
                    cleanUserModalBody();
                    window.location.href = '/Users';
                }, 1000);
            }
            catch(error){
                handleExceptionInFormWithRedirect(error);
            }
        }

        const handleTwoFactorAuthentication = async (userId, enabled) => {
            try{

                const response = await fetch(`/Auth/HandleTwoFactorAuthentication/${userId}/${enabled}`);

                if (!response.ok) {
                    return await handleRequestInError(response);
                }

                showNotification(false);

                setTimeout(() => {
                    cleanUserModalBody();
                    window.location.href = '/Users';
                }, 1000);
            }
            catch (error) {
                handleExceptionInFormWithRedirect(error);
            }
        }

        const confirmPhoneNumber = async (userId) => {
            try{
                const response = await fetch(`/Users/ConfirmPhoneNumber/${userId}`);

                if (!response.ok) {
                    return await handleRequestInError(response);
                }

                showNotification(false);


                setTimeout(() => {
                    cleanUserModalBody();
                    window.location.href = '/Users';
                }, 1000);
            }
            catch(error){
                handleExceptionInFormWithRedirect(error);
            }
        }

        const openConfirmUserModal = async (element,userId, fullName, message) => {
            
            const answerParagraph = document.getElementById('confirm-user-answer');
            answerParagraph.innerHTML = message;

            const actionAttribute = element.getAttribute('data-action');

            if (!actionAttribute){
                console.error = "action attribute is not evaluable";
            }

            const confirmButton = document.getElementById('confirm-user-modal-button');
            confirmButton.setAttribute('data-userid', userId);
            confirmButton.setAttribute('data-action', actionAttribute);


            const confirmUserModal = new bootstrap.Modal(document.getElementById('confirm-user-modal'));
            confirmUserModal.show();
        }
        
        const onClickConfirmUserModal = async (element) => {
           
            const actionAttribute = element.getAttribute('data-action');

            if (!actionAttribute) {
                console.error = "action attribute is not evaluable";
            }

            switch (Number(actionAttribute)) {
                case 0:
                    await promoteToAdmin(element);
                    break;
                case 1:
                    await deleteUser(element);
                    break;
                default:
                    await promoteToAdmin(element);
                    break;
                    
            }
        }

        const promoteToAdmin = async (element) => {
            try {
                const userId = element.getAttribute('data-userid');

                if (!userId) {
                    throw new Error('promoteToAdmin -> User Id not retrived');
                }

                const response = await fetch(`/Users/${userId}/PromoteToAdmin`);

                if (!response.ok) {
                    return await handleRequestInError(response);
                }

                showNotification(false);

                setTimeout(() => {
                    cleanUserModalBody();
                    window.location.href = '/Users';
                }, 1000);


            }
            catch (error) {
                handleExceptionInFormWithRedirect(error);
            }
        }

        const deleteUser = async (element) => {
            try
            {
                const userId = element.getAttribute('data-userid');

                if (!userId) {
                    throw new Error('deleteUser -> User Id not retrived');
                }

                const response = await fetch(`/Users/${userId}`, {
                method:'DELETE'
                });

                if (!response.ok) {
                    return await handleRequestInError(response);
                }

                showNotification(false);

                setTimeout(() => {
                    cleanUserModalBody();
                    window.location.href = '/Users';
                }, 1000);


            }
            catch (error) {
                handleExceptionInFormWithRedirect(error);
            }
        }

    </script>
}