@using Troonch.User.Domain.DTOs.Response;
@model UserResponseDTO;

<div class="card" style="border-radius: 15px;">
    <div class="card-body text-center">
        <div class="mt-3 mb-4">
            <img src="~/assets/images/faces-clipart/pic-1.png" alt="@Model.FullName" class="rounded-circle img-fluid" style="width: 100px;">
        </div>
        <h4 class="mb-2">@Model.FullName</h4>
        <p class="text-muted mb-1">
            Email <span class="mx-2">|</span> <a href="mailto:@Model.Email">@Model.Email</a>
        </p>
        <p class="mb-4">
            @if(Model.RoleNames.Count() == 1)
            {
                <span>Ruolo |</span>
            }
            else
            {
                <span>Ruoli |</span>
            }

            @foreach (var role in Model.RoleNames)
            {
                <span class="mx-1">@role</span>
            }
        </p>
        <div class="mb-4 pb-2">
            <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-outline-primary btn-floating">
                <i class="mdi mdi-facebook"></i>
            </button>
            <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-outline-primary btn-floating">
                <i class="mdi mdi-instagram"></i>
            </button>
            <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-outline-primary btn-floating">
                <i class="mdi mdi-linkedin"></i>
            </button>
        </div>
        <button type="button" class="btn btn-primary btn-rounded btn-lg" onclick="confirmEmail('@Model.Id')">
            <i class="mdi mdi-email-open-outline mr-1"></i> Conferma Email
        </button>

        <h6 class="mt-4 mb-2">Altre Azioni </h6>

        <div class="d-flex justify-content-center text-center mt-5 mb-2">
            <div class="btn-group-vertical" role="group" aria-label="Basic example">
                @if (Model.TwoFactorEnabled)
                {
                    <button type="button" class="btn btn-primary btn-rounded" onclick="handleTwoFactorAuthentication('@Model.Id', false)">
                        <i class="mdi mdi-email-variant mx-1"></i> Disabilita Autenticazione a due fattori
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-primary btn-rounded" onclick="handleTwoFactorAuthentication('@Model.Id', true)">
                        <i class="mdi mdi-email-variant mx-1"></i> Abilita Autenticazione a due fattori
                    </button>
                }

                @if (!String.IsNullOrWhiteSpace(Model.PhoneNumber) && !Model.PhoneNumberConfirmed)
                {
                    <button type="button" class="btn btn-primary btn-rounded" onclick="confirmPhoneNumber('@Model.Id')">
                        <i class="mdi mdi-cellphone mx-1"></i> Conferma numero di telefono
                    </button>
                }
                @if (User.IsInRole("admin") || User.IsInRole("systemAdmin"))
                {
                    @if (!Model.RoleNames.Any(role => role.Equals("admin",StringComparison.OrdinalIgnoreCase) && !role.Contains("sys")))
                    {
                        <button type="button" class="btn btn-primary btn-rounded" data-action="0"  onclick="openConfirmUserModal(this,'@Model.Id','@Model.FullName', 'Confermi di voler promuovere @Model.FullName?')">
                            <i class="mdi mdi-account-convert mx-1"></i> Promuovi ad Admin
                        </button>
                    }
                    <button type="button" class="btn btn-primary btn-rounded" data-action="1" onclick="openConfirmUserModal(this,'@Model.Id','@Model.FullName', 'Confermi di voler eliminare @Model.FullName?')">
                        <i class="mdi mdi-account-remove mx-1" ></i> Rimuovi Utente
                    </button>
                }
            </div>
        </div>
    </div>
</div>