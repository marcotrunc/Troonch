// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Troonch.Sales.DataAccess;

#nullable disable

namespace Troonch.RetailSales.Product.DataAccess.Migrations
{
    [DbContext(typeof(RetailSalesProductDataContext))]
    partial class RetailSalesProductDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Troonch.Domain.Base.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Exception")
                        .HasColumnType("longtext");

                    b.Property<string>("Level")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("longtext");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CoverImageLink")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<Guid>("ProductBrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductGenderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProductMaterialId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageLink")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductGenderId");

                    b.HasIndex("ProductMaterialId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<Guid>("ProductSizeTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductSizeTypeId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HexadecimalValue")
                        .HasPrecision(7)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HexadecimalValue")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductGender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductGenders");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Barcode")
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("ProductColorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductSizeOptionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("QuantityAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("SalePrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSizeOptionId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ProductMaterials");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductSizeOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductSizeTypeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductSizeTypeId");

                    b.ToTable("ProductSizeOptions");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductSizeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ProductSizeTypes");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductTag");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductTagLookup", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTagLookup");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.Product", b =>
                {
                    b.HasOne("Troonch.Sales.Domain.Entities.ProductBrand", "ProductBrand")
                        .WithMany("Products")
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Troonch.Sales.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Troonch.Sales.Domain.Entities.ProductGender", "ProductGender")
                        .WithMany("Products")
                        .HasForeignKey("ProductGenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Troonch.Sales.Domain.Entities.ProductMaterial", "ProductMaterial")
                        .WithMany("Products")
                        .HasForeignKey("ProductMaterialId");

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductGender");

                    b.Navigation("ProductMaterial");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("Troonch.Sales.Domain.Entities.ProductSizeType", "ProductSizeType")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductSizeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSizeType");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("Troonch.Sales.Domain.Entities.ProductColor", "ProductColor")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Troonch.Sales.Domain.Entities.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Troonch.Sales.Domain.Entities.ProductSizeOption", "ProductSizeOption")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductSizeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductColor");

                    b.Navigation("ProductSizeOption");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductSizeOption", b =>
                {
                    b.HasOne("Troonch.Sales.Domain.Entities.ProductSizeType", "ProductSizeType")
                        .WithMany("ProductSizeOptions")
                        .HasForeignKey("ProductSizeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSizeType");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductTagLookup", b =>
                {
                    b.HasOne("Troonch.Sales.Domain.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Troonch.Sales.Domain.Entities.ProductTag", "ProductTag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductItems");

                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductBrand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductColor", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductGender", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductMaterial", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductSizeOption", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductSizeType", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductSizeOptions");
                });

            modelBuilder.Entity("Troonch.Sales.Domain.Entities.ProductTag", b =>
                {
                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
