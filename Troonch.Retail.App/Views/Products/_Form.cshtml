@using Troonch.RetailSales.Product.Domain.DTOs.Requests;

@model ProductRequestDTO;

@functions {
    public bool IsUpdateForm()
    {
        if (Model is null)
        {
            return true;
        }

        if (Model.Id != Guid.Empty)
        {
            return true;
        }
        return false;
    }
}

@{
    bool isUpdate = IsUpdateForm();

    var genderDropdownAttributes = new Dictionary<string, object>
        {
            { "class", "col-md-6 form-control" },
            { "id", "gender" },
            { "onchange", $"updateCategoriesOptionsByGender(this, {@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.GenderCategories))}, {@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Categories))})" }
        };


    var categoriesAttributes = new Dictionary<string, object>
    {
      {"class",  $"{(isUpdate ? "" : "d-none")} col-md-6 form-control"},
      {"id","category"}
    }
    ;
    if (isUpdate)
    {
        genderDropdownAttributes.Add("disabled", "disabled");
        categoriesAttributes.Add("disabled", "disabled");
    }
}

<div>
    @using (Html.BeginForm("Create", "Products", FormMethod.Post, new { @onsubmit = Model.Id == Guid.Empty ? "submitProductForm(event)" : "submitProductFormInUpdate(event)", @id = "product-form", @class = "forms-sample row" }))
        {
         
            @Html.ValidationSummary(true)
            @Html.HiddenFor(m => m.Id, new{@id="product-id"})

            <div class="form-group">
                @Html.LabelFor(m => m.Name, "Nome")
                @Html.TextBoxFor(m => m.Name, new { @class="form-control", @id="name", @placeholder="name"})
                @Html.ValidationMessageFor(m => m.Name,"", new { @class="text-danger mt-1 my-2 ms-1 d-block error-message", data_error="name"})
            </div>

            <div class="form-group col-12 col-md-6">
                @Html.LabelFor(m => m.ProductGenderId, "Gender")
                @Html.DropDownListFor(m => m.ProductGenderId, new SelectList(ViewBag.Genders, "Id", "Name", null),"Scegli...", genderDropdownAttributes)            
                @if (isUpdate)
                {
                    @Html.HiddenFor(m => m.ProductGenderId, new { @id = "gender-hidden" })
                }
                @Html.ValidationMessageFor(m => m.ProductGenderId, "", new { @class = "text-danger mt-1 my-2 ms-1 d-block error-message", data_error = "productgenderid" })
            </div>
            
            <div class="form-group col-12 col-md-6">
                @Html.LabelFor(m => m.ProductCategoryId, "Categoria")
                @Html.DropDownListFor(m => m.ProductCategoryId, new SelectList(new List<dynamic>(), "Id", "Name", null), "", new { @class = $"{(isUpdate ? "d-none" : "")} col-md-6 form-control", @id = "category-empty" })
                @Html.DropDownListFor(m => m.ProductCategoryId, new SelectList(ViewBag.Categories, "Id", "Name"), categoriesAttributes)
                @if (isUpdate)
                {
                    @Html.HiddenFor(m => m.ProductCategoryId, new { @id = "category-hidden" })
                }
                @Html.ValidationMessageFor(m => m.ProductCategoryId,"", new { @class="text-danger mt-1 my-2 ms-1 d-block error-message", data_error="productcategoryid"})
            </div>

            <div class="form-group col-12 col-md-6">
                @Html.LabelFor(m => m.ProductBrandId, "Brand")
                @Html.DropDownListFor(m => m.ProductBrandId, new SelectList(ViewBag.Brands, "Id", "Name"), new { @class = "col-md-6 form-control", @id = "brand" })
                @Html.ValidationMessageFor(m => m.ProductBrandId,"", new { @class="text-danger mt-1 my-2 ms-1 d-block error-message", data_error="productbrandid"})
            </div>

            <div class="form-group col-12 col-md-6">
                @Html.LabelFor(m => m.ProductMaterialId, "Materiali")
                @Html.DropDownListFor(m => m.ProductMaterialId, new SelectList(ViewBag.Materials,"Id","Value"), new {@class="col-md-6 form-control",  @id="material"} )
                @Html.ValidationMessageFor(m => m.ProductMaterialId,"", new { @class="text-danger mt-1 my-2 ms-1 d-block error-message", data_error="productmaterialid"})
            </div>

            <div class="form-group col-12">
                @Html.LabelFor(m => m.Description, "Descrizione")
                @Html.TextAreaFor(m => m.Description, new { @class="form-control", @id="description", @rows= ((isUpdate) ? "15": "5")})
                @Html.ValidationMessageFor(m => m.Description,"", new { @class="text-danger mt-1 my-2 ms-1 d-block error-message", data_error="description"})
            </div>
            
            <div class="d-flex justify-content-end">
                <div class="form-check form-check-flat form-check-primary">
                @Html.CheckBoxFor(m => m.IsPublished,new {@id="is-published",@class="form-check-input",@onclick="toogleValue(this)" ,@checked= ((!isUpdate || Model.IsPublished ) ? "true": "false")})Pubblica<i class="input-helper"></i>
            </div>
            </div>

            <div class="form-group">
                @Html.CheckBoxFor(m => m.IsDeleted,new {@id="is-deleted",@class="form-check-input", @hidden="true"})
            </div>

        <div class="">
            @if (!isUpdate)
            {
                <button type="button" class="btn btn-light w-100 mb-3" @(!isUpdate ? "data-bs-dismiss='modal'" : "")>Cancel</button>
            }
            <button type="submit" class="btn btn-gradient-primary w-100">Submit</button>
            </div>
        }
</div>





