@using Troonch.DataAccess.Base.Helpers;
@using Troonch.RetailSales.Product.Domain.DTOs.Responses;

@model PagedList<ProductResponseDTO>;

<section class="container">
    <div class="page-header">
        <h3 class="page-title">
            <span class="page-title-icon bg-gradient-primary text-white me-2">
                <i class="mdi mdi-tshirt-crew"></i>
            </span> @ViewData["Title"]
        </h3>

        @(await Html.PartialAsync("_SearchBar"))

        <nav aria-label="breadcrumb">
            <ul class="breadcrumb">
                <li class="breadcrumb-item active" aria-current="page">
                    <!--Button for modal showing-->
                    <button type="button" class="btn btn btn-gradient-primary btn-fw" onclick="showAddProductModal()">
                        Aggiungi
                    </button>
                </li>
            </ul>
        </nav>
    </div>

    @if (Model.Collections.Any())
    {
        <div class="row">
            @foreach (var product in Model.Collections)
            {
                <div class="col-12 col-md-4 mb-4">
                    <div class="card border shadow-none mb-0">
                        <div class="card-body text-center">
                            @if (String.IsNullOrWhiteSpace(product.CoverImageLink))
                            {
                                <img src="https://static.zara.net/assets/public/47a3/2399/f91d4984bcc9/566881ec3896/1689085196541/1689085196541.jpg?ts=1701856748172&w=551" class="img-fluid mb-3" alt="">
                            }
                            else{
                                <img src="@product.CoverImageLink" class="img-fluid mb-3" alt="">
                            }
                            <h6 class="product-title">@product.ProductBrandName @product.Name</h6>
                            <p class="product-price fs-5 mb-1"><small>@product.ProductGenderName</small></p>
                            <small>@product.ProductMaterialName</small>
                            <div class="actions d-flex align-items-center justify-content-center gap-2 mt-3">
                                <a class="btn btn-sm btn-outline-primary" asp-area="" asp-controller="Products" asp-action="Detail" asp-route-slug="@product.Slug">
                                    Dettaglio
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @(await Html.PartialAsync("_Pagination"))
        </div>
    }
    else
    {
        <div class="row overflow-y-section-700">
            <div class="col-md-12 grid-margin stretch-card ">
                <div class="card px-5 py-5 d-flex justify-content-center align-items-center">
                    Nessun prodotto disponibile al momento
                </div>
            </div>
        </div>
    }
</section>

<!-- Modal -->
<div class="modal fade" id="add-product-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Nuovo Prodotto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div id="add-product-modal-body" class="modal-body">
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script>

        const showAddProductModal = async () => {

            try {
                const response = await fetch('@Url.Action("GetProductForm","Products")');

                if (!response.ok) {
                    return await handleRequestInError(response);
                }

                const htmlFormContent = await response.text();

                if (htmlFormContent) {
                    const modalBody = document.getElementById('add-product-modal-body');
                    modalBody.innerHTML = htmlFormContent;
                }

                const appProductModal = new bootstrap.Modal(document.getElementById('add-product-modal'));
                appProductModal.show();

            } catch (error) {
                console.log('showAddProductModal error message ->', error)
            }

        }


        const submitProductForm = async (event) => {
            debugger;
            event.preventDefault();
            const formId = 'product-form';
            const productForm = document.getElementById(formId);
            
            const formData = new FormData(productForm);

            cleanFormFromErrorMessage();

            let payload = {};
            formData.forEach((value, key) => {
                if (value == 'false') value = false;
                if (value == 'true') value = true;
                payload[key] = value;
            });

            disableForm(formId);

            const jsonData = JSON.stringify(payload);
            const url = '@Url.Action("Create", "Products")';

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json; charset=utf-8'
                    },
                    body: jsonData
                })

                if (!response.ok) {
                    return await handleRequestInError(response, formId);
                }

                
                showNotification(false);
                setTimeout(() => window.location.href = '@Url.Action("Index", "Products")', 2000);
                
            }
            catch (error) {
                handleExceptionInFormWithRedirect(error);
            }
        }


        const updateCategoriesOptionsByGender = (element, productGenderSizeTypesLookup, categories) => {

            const genderDropdown = document.getElementById('gender');
            const categoryEmpty = document.getElementById('category-empty');
            let categoryDropdown = document.getElementById('category');

            const selectedGenderId = element.value;

            if (!selectedGenderId || selectedGenderId == ""){
                categoryEmpty.classList.remove('d-none')
                categoryDropdown.classList.add('d-none')
                return;
            }

            const sizeTypesByGender = productGenderSizeTypesLookup.filter(item => item.ProductGenderId == selectedGenderId).map(item => item.ProductSizeTypeId);

            const categoriesFiltered = categories.filter(category => sizeTypesByGender.includes(category.ProductSizeTypeId));

            categoryDropdown.innerHTML = '';

            categoriesFiltered.forEach((category) => {
                var option = document.createElement('option');
                option.value = category.Id;
                option.text = category.Name;
                categoryDropdown.appendChild(option);
            });

            categoryEmpty.classList.add('d-none')
            categoryDropdown.classList.remove('d-none')
        }
    </script>
}

