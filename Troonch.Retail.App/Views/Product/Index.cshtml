@using Troonch.DataAccess.Base.Helpers;
@using Troonch.RetailSales.Product.Domain.DTOs.Responses;

@model PagedList<ProductResponseDTO>;

<section class="container">
    <div class="page-header">
        <h3 class="page-title">
            <span class="page-title-icon bg-gradient-primary text-white me-2">
                <i class="mdi mdi-tshirt-crew"></i>
            </span> @ViewData["Title"]
        </h3>
        <nav aria-label="breadcrumb">
            <ul class="breadcrumb">
                <li class="breadcrumb-item active" aria-current="page">
                    <!--Button for modal showing-->
                    <button type="button" class="btn btn btn-gradient-primary btn-fw" onclick="showAddProductModal()">
                        Aggiungi
                    </button>
                </li>
            </ul>
        </nav>
    </div>
    <div class="row">
        @foreach (var product in Model.Collections)
        {
            <div class="col">
                <div class="card border shadow-none mb-0">
                    <div class="card-body text-center">
                        <img src="assets/images/products/01.png" class="img-fluid mb-3" alt="">
                        <h6 class="product-title">Men White Polo T-shirt</h6>
                        <p class="product-price fs-5 mb-1"><span>$250.99</span></p>
                        <div class="rating mb-0">
                            <i class="bi bi-star-fill text-warning"></i>
                            <i class="bi bi-star-fill text-warning"></i>
                            <i class="bi bi-star-fill text-warning"></i>
                            <i class="bi bi-star-fill text-warning"></i>
                            <i class="bi bi-star-fill text-warning"></i>
                        </div>
                        <small>74 Reviews</small>
                        <div class="actions d-flex align-items-center justify-content-center gap-2 mt-3">
                            <a href="javascript:;" class="btn btn-sm btn-outline-primary"><i class="bi bi-pencil-fill"></i> Edit</a>
                        <a href="javascript:;" class="btn btn-sm btn-outline-danger"><i class="bi bi-trash-fill"></i> Delete</a> 
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

<!-- Modal -->
<div class="modal fade" id="add-product-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div id="add-product-modal-body" class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        const showAddProductModal = async () => {

            try {
                debugger;
                const response = await fetch('@Url.Action("GetProductForm","Product")');

                if (!response.ok)
                    throw new Error('form not loaded');

                const htmlFormContent = await response.text();

                if (htmlFormContent) {
                    const modalBody = document.getElementById('add-product-modal-body');
                    modalBody.innerHTML = htmlFormContent;
                }

            } catch (error) {
                console.log('showAddProductModal error message ->', error)
            }

            const appProductModal = new bootstrap.Modal(document.getElementById('add-product-modal'));
            appProductModal.show();
        }


        const submitProductForm = async (event) => {
            debugger;

            event.preventDefault();

            const productForm = document.getElementById('product-form');
            const formData = new FormData(productForm);

            let payload = {};
            formData.forEach((value, key) => {
                payload[key] = value;
            });

            const jsonData = JSON.stringify(payload);

            try {
                const response = await fetch('@Url.Action("Create", "Product", new { area = "Api" })', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: jsonData
                })

                if (response.status == 422) {
                    const errorResult = await response.json();  
                    console.log(errorResult);
                }


                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                
            }
            catch (error) {
                console.error(error);
            }
        }
    </script>
}

